---
#- name: Debug etcd file pattern match
#  tags: debug
#  set_fact:
#    etcd_file_name: "{{ item }}"
#  when: item is regex('/etcd.yaml$')
#  loop: "{{ files_list_dict[inventory_hostname] }}"
- name: CRI block
  tags: debug
  block:
  - name: Get container runtime
    shell:
      cmd: "kubectl get nodes {{ inventory_hostname }} -o jsonpath='{$.status.nodeInfo.containerRuntimeVersion}'"
    register: cri_full

  - name: Debug print
    debug:
      msg: cri name '{{ cri_full.stdout_lines[0] }}'

  - name: Get cri base name
    set_fact:
      cri: '{{ cri_full.stdout_lines[0].split(":")[0] | trim }}'

  - name: Debug print 2
    debug:
      msg: basename '{{ cri }}'

# docker container ls -f name="k8s_POD_kube-apiserver-babka-1-p8vx5hwmx97xrpg"
- name: Docker calls test block
  tags: debug
  block:
  - name: set container name for debug
    set_fact:
      container_name: 'k8s_POD_kube-controller-manager-{{ inventory_hostname }}'
  - name: get container ID
    shell:
      cmd: 'docker container ls -f name={{ container_name }} -q'
    register: container_id
  - name: debug print container_id
    debug:
      msg: cmd_out '{{ container_id.stdout_lines[0] }}'
#
#- name: Geting CRI socket from host
#  tags: debug
#  block:
#  - name: CRI - Getting kubelet cmdline from proc
#    shell:
#      cmd: tr \\0 ' ' < /proc/"$(pgrep kubelet)"/cmdline
#    register: kubelet_cmd
#
#  - name: Debug print a
#    debug:
#      msg: cmd "{{ kubelet_cmd }}"
#
#  - name: Debug print 1
#    debug:
#      msg: '{{ (kubelet_cmd.stdout_lines[0] | regex_search("--container-runtime-endpoint=[:\w\/]{0,}")).split("=")[1].split("/run/")[1].split("/")[0] | trim }}'
#
#  - name: CRI - Getting CRI socket name
#    set_fact:
#      cri: '{{ (kubelet_cmd.stdout_lines[0] | regex_search("--container-runtime-endpoint=[:\w\/]{0,}")).split("=")[1].split("/run/")[1].split("/")[0] | trim }}'
#
#  - name: CRI - debug print
#    debug:
#      msg: CRI '{{ cri }}'\n '{{ kubelet_cmd.stdout_lines[0] }}'
#
# - name: Restart phase - check etcd health again
#   tags: debug
#   shell:
#     cmd: /usr/local/bin/etcdctl.sh endpoint health -w json
#   register: etcd_h_json
#
# - name: Debug print 1
#   tags: debug
#   debug:
#     msg: print 1 "{{ etcd_h_json }}"
#
# - name: debug print 2
#   tags: debug
#   debug:
#     msg: print 2 "{{ etcd_h_json.stdout_lines }}"
#
#
# - name: debug print 3
#   tags: debug
#   debug:
#     msg: print 2 "{{ etcd_h_json.stdout_lines[0] | from_json }}"
#
# - name: Debug etcd restart block
#   tags: debug
#   block:
#     - name: Restart phase - check etcd health again
#       tags: debug
#       shell:
#         cmd: /usr/local/bin/etcdctl.sh endpoint health -w json
#       register: etcd_h_json
#       until: etcd_h_json.stdout_lines[0] | from_json | selectattr('health','equalto', false) | list | count == 1
#       retries: 5
#       delay: 5
#   rescue:
#     - name: Print etcd health
#       debug:
#         msg: etcd "{{ item }}"
#       loop: "{{ etcd_h_json.stdout_lines[0] }}"
